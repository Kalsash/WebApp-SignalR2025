@model IEnumerable<WebApp_SignalR2025.Models.User>
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@{
    ViewData["Title"] = "Chats Page";
}
@{
    var currentUser = await UserManager.GetUserAsync(User);
    var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var userName = User.Identity?.Name;
    var iconPath = currentUser?.IconPath ?? "https://i.pravatar.cc/100";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages - Social Network</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        swamp: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-swamp-50 h-screen">
    <div class="max-w-7xl mx-auto h-full flex flex-col items-center justify-center">
        @if (User.Identity.IsAuthenticated)
        {
            <!-- Чат интерфейс -->
            <div class="w-full flex h-full">
                <!-- Chat List (Left Column) -->
                <div class="w-1/3 bg-white border-r border-swamp-100 flex flex-col">
                    <!-- Header -->
                    <div class="p-6 border-b border-swamp-100">
                        <h2 class="text-2xl font-bold text-swamp-900">Messages</h2>
                        <!-- Кнопка выхода -->
                        <form method="post" asp-controller="Account" asp-action="Logout" class="mt-4">
                            <button type="submit" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-500 transition duration-300">LogOut</button>
                        </form>
                    </div>

                    <!-- Conversations List -->
                    <div class="flex-1 overflow-y-auto" id="chat-list">
                        <!-- Group chats section -->
                        <div class="p-4 border-b border-swamp-100 bg-swamp-50">
                            <h3 class="font-semibold text-swamp-700">Group Chats</h3>
                        </div>
                        <div class="group-item p-4 hover:bg-swamp-50 border-b border-swamp-100 cursor-pointer" data-group-name="General">
                            <div class="flex items-center space-x-3">
                                <div class="w-12 h-12 rounded-full bg-swamp-200 flex items-center justify-center">
                                    <svg class="w-6 h-6 text-swamp-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                </div>
                                <div>
                                    <h4 class="font-semibold text-swamp-900">General</h4>
                                    <p class="text-xs text-swamp-500">Group chat</p>
                                </div>
                            </div>
                        </div>
                        <div class="group-item p-4 hover:bg-swamp-50 border-b border-swamp-100 cursor-pointer" data-group-name="Support">
                            <div class="flex items-center space-x-3">
                                <div class="w-12 h-12 rounded-full bg-swamp-200 flex items-center justify-center">
                                    <svg class="w-6 h-6 text-swamp-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z" />
                                    </svg>
                                </div>
                                <div>
                                    <h4 class="font-semibold text-swamp-900">Support</h4>
                                    <p class="text-xs text-swamp-500">Group chat</p>
                                </div>
                            </div>
                        </div>

                        <!-- Private chats section -->
                        <div class="p-4 border-b border-swamp-100 bg-swamp-50 mt-4">
                            <h3 class="font-semibold text-swamp-700">Private Chats</h3>
                        </div>
                        @foreach (var user in Model)
                        {
                            var displayName = user.Id == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ? "Избранное" : user.UserName;
                            <div class="chat-item p-4 hover:bg-swamp-50 border-b border-swamp-100 cursor-pointer" data-user-id="@user.Id" data-user-name="@displayName" data-user-icon="@user.IconPath">
                                <div class="flex items-center space-x-3">
                                    <img src="@user.IconPath" class="w-12 h-12 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between">
                                            <h4 class="font-semibold text-swamp-900">@displayName</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Chat Window (Right Column) -->
                <div class="flex-1 flex flex-col">
                    <div id="chat-header" class="p-4 bg-white border-b border-swamp-100 flex items-center space-x-3 hidden">
                        <img id="receiver-icon" class="w-10 h-10 rounded-full">
                        <div>
                            <h3 id="receiver-name" class="font-semibold text-swamp-900"></h3>
                        </div>
                    </div>

                    <div id="typingIndicator" class="hidden text-sm text-gray-500 px-4 py-1 bg-swamp-50"></div>

                    <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4 bg-swamp-50"></div>

                    <div class="p-4 bg-white border-t border-swamp-100">
                        <div class="flex space-x-2">
                            <input type="text" id="messageInput" placeholder="Type your message..." class="flex-1 pl-4 pr-12 py-2 bg-swamp-100 rounded-full border-none focus:ring-2 focus:ring-swamp-400 placeholder-swamp-500 text-swamp-900">
                            <button id="sendButton" class="p-2 hover:bg-swamp-200 rounded-full">
                                <svg class="w-6 h-6 text-swamp-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" transform="rotate(90)">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Кнопки входа и регистрации -->
            <div class="flex flex-col items-center">
                <h2 class="text-2xl font-bold text-swamp-900 mb-4">Welcome to Social Network</h2>
                <a asp-controller="Account" asp-action="Login" class="bg-swamp-600 text-white px-4 py-2 rounded hover:bg-swamp-500 transition duration-300">LogIn</a>
                <a asp-controller="Account" asp-action="Register" class="mt-2 bg-swamp-600 text-white px-4 py-2 rounded hover:bg-swamp-500 transition duration-300">Register</a>
            </div>
        }
    </div>

    <script>
        // Глобальные переменные для хранения состояния чата
        let selectedReceiverId = null;
        let currentGroup = null;
        let currentChatMessages = [];

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chats")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Получаем текущего пользователя
        const currentUser = {
            id: '@userId',
            name: '@userName',
            icon: '@iconPath'
        };

        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.error(err);
                setTimeout(start, 5000);
            }
        }

        connection.onclose(async () => {
            await start();
        });

        // Обработчики сообщений
        connection.on("ReceiveMessage", (message) => {
            console.log("Received private message:", message);
            if (selectedReceiverId === message.senderId) {
                displayMessage(message);
            }
        });

        connection.on("ReceiveGroupMessage", (message) => {
            console.log("Received group message:", message);
            if (currentGroup === message.groupName) {
                displayGroupMessage(message);
            }
        });

        connection.on("UserJoined", (userName) => {
            if (currentGroup) {
                showSystemMessage(`${userName} joined the group`);
            }
        });

        connection.on("UserLeft", (userName) => {
            if (currentGroup) {
                showSystemMessage(`${userName} left the group`);
            }
        });

        connection.on("UserTyping", (user) => {
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator && (selectedReceiverId === user.senderId || currentGroup)) {
                typingIndicator.textContent = `${user.senderName} is typing...`;
                typingIndicator.classList.remove('hidden');

                setTimeout(() => {
                    typingIndicator.classList.add('hidden');
                }, 2000);
            }
        });

        // Функции отображения сообщений
        function displayMessage(message) {
            const messagesContainer = document.getElementById('messages-container');
            const isCurrentUser = message.senderId === currentUser.id;

            const messageElement = document.createElement('div');
            messageElement.className = isCurrentUser
                ? 'flex items-start space-x-2 max-w-3/4 justify-end'
                : 'flex items-start space-x-2 max-w-3/4';

            messageElement.innerHTML = `
                <div class="flex items-start mb-2 ${isCurrentUser ? 'justify-end' : 'justify-start'}">
                    ${isCurrentUser ? '' : `<img src="${message.senderIcon}" class="w-8 h-8 rounded-full mr-2">`}

                    <div class="order-2 flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}">
                        <h4 class="${isCurrentUser ? 'font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent' : 'font-semibold bg-gradient-to-r from-gray-700 to-swamp-600 bg-clip-text text-transparent'}">
                            ${isCurrentUser ? 'Вы' : message.senderName}
                        </h4>

                        <div class="${isCurrentUser ? 'bg-swamp-600 text-white' : 'bg-white border border-gray-200'} p-3 rounded-xl shadow-sm max-w-md mt-1">
                            <p>${message.message}</p>
                        </div>

                        <span class="text-xs ${isCurrentUser ? 'text-swamp-300' : 'text-swamp-500'} mt-1">
                            ${new Date(message.timestamp).toLocaleTimeString()}
                        </span>
                    </div>

                    ${isCurrentUser ? `<img src="${currentUser.icon}" class="w-8 h-8 rounded-full ml-2">` : ''}
                </div>
            `;

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            currentChatMessages.push(message);
        }

        function displayGroupMessage(message) {
            const messagesContainer = document.getElementById('messages-container');
            const isCurrentUser = message.senderId === currentUser.id;

            const messageElement = document.createElement('div');
            messageElement.className = isCurrentUser
                ? 'flex items-start space-x-2 max-w-3/4 justify-end'
                : 'flex items-start space-x-2 max-w-3/4';

            messageElement.innerHTML = `
                <div class="flex items-start mb-2 ${isCurrentUser ? 'justify-end' : 'justify-start'}">
                    ${isCurrentUser ? '' : `<img src="${message.senderIcon}" class="w-8 h-8 rounded-full mr-2">`}

                    <div class="order-2 flex flex-col ${isCurrentUser ? 'items-end' : 'items-start'}">
                        <h4 class="${isCurrentUser ? 'font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent' : 'font-semibold bg-gradient-to-r from-gray-700 to-swamp-600 bg-clip-text text-transparent'}">
                            ${message.senderName}
                        </h4>

                        <div class="${isCurrentUser ? 'bg-swamp-600 text-white' : 'bg-white border border-gray-200'} p-3 rounded-xl shadow-sm max-w-md mt-1">
                            <p>${message.message}</p>
                        </div>

                        <span class="text-xs ${isCurrentUser ? 'text-swamp-300' : 'text-swamp-500'} mt-1">
                            ${new Date(message.timestamp).toLocaleTimeString()}
                        </span>
                    </div>

                    ${isCurrentUser ? `<img src="${currentUser.icon}" class="w-8 h-8 rounded-full ml-2">` : ''}
                </div>
            `;

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            currentChatMessages.push(message);
        }

        function showSystemMessage(message) {
            const messagesContainer = document.getElementById('messages-container');
            const messageElement = document.createElement('div');
            messageElement.className = 'text-center text-gray-500 text-sm my-2';
            messageElement.textContent = message;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Обработчики событий UI
        document.querySelectorAll('.chat-item').forEach(item => {
            item.addEventListener('click', async function() {
                const receiverId = this.getAttribute('data-user-id');
                const receiverName = this.getAttribute('data-user-name');
                const receiverIcon = this.getAttribute('data-user-icon');

                // Leave current group if any
                if (currentGroup) {
                    try {
                        await connection.invoke("LeaveGroupChat", currentGroup);
                        currentGroup = null;
                    } catch (err) {
                        console.error("Error leaving group:", err);
                    }
                }

                // Set new private chat
                selectedReceiverId = receiverId;

                // Update UI
                document.getElementById('messages-container').innerHTML = '';
                document.getElementById('chat-header').classList.remove('hidden');
                document.getElementById('receiver-name').textContent = receiverName;
                document.getElementById('receiver-icon').src = receiverIcon;
                currentChatMessages = [];
            });
        });

        document.querySelectorAll('.group-item').forEach(item => {
            item.addEventListener('click', async function() {
                const groupName = this.getAttribute('data-group-name');

                // Leave current private chat if any
                if (selectedReceiverId) {
                    selectedReceiverId = null;
                }

                // Leave current group if different
                if (currentGroup && currentGroup !== groupName) {
                    try {
                        await connection.invoke("LeaveGroupChat", currentGroup);
                    } catch (err) {
                        console.error("Error leaving group:", err);
                    }
                }

                // Join new group
                try {
                    await connection.invoke("JoinGroupChat", groupName);
                    currentGroup = groupName;

                    // Update UI
                    document.getElementById('messages-container').innerHTML = '';
                    document.getElementById('chat-header').classList.remove('hidden');
                    document.getElementById('receiver-name').textContent = groupName;
                    document.getElementById('receiver-icon').src = 'https://i.pravatar.cc/100?img=30';
                    currentChatMessages = [];

                    showSystemMessage(`You joined ${groupName}`);
                } catch (err) {
                    console.error("Error joining group:", err);
                }
            });
        });

        document.getElementById('sendButton').addEventListener('click', async () => {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (message) {
                if (selectedReceiverId) {
                    // Private message
                    const isFavorite = selectedReceiverId === currentUser.id;

                    if (!isFavorite) {
                        try {
                            await connection.invoke("SendMessage", selectedReceiverId, message);
                        } catch (err) {
                            console.error("Error sending message:", err);
                            return;
                        }
                    }

                    input.value = '';

                    // Create message object for display
                    const newMessage = {
                        senderId: currentUser.id,
                        receiverId: selectedReceiverId,
                        message: message,
                        senderName: currentUser.name,
                        senderIcon: currentUser.icon,
                        timestamp: new Date().toISOString()
                    };

                    displayMessage(newMessage);
                } else if (currentGroup) {
                    // Group message
                    try {
                        await connection.invoke("SendGroupMessage", currentGroup, message);
                    } catch (err) {
                        console.error("Error sending group message:", err);
                        return;
                    }

                    input.value = '';

                    // Create message object for display
                    const newMessage = {
                        senderId: currentUser.id,
                        groupName: currentGroup,
                        message: message,
                        senderName: currentUser.name,
                        senderIcon: currentUser.icon,
                        timestamp: new Date().toISOString()
                    };
                }
            }
        });

        document.getElementById('messageInput').addEventListener('input', async (e) => {
            if (e.target.value.trim().length > 0) {
                if (selectedReceiverId) {
                    try {
                        await connection.invoke("TypingNotification", selectedReceiverId);
                    } catch (err) {
                        console.error("Error sending typing notification:", err);
                    }
                } else if (currentGroup) {
                    // Можно добавить уведомление о наборе в групповом чате
                }
            }
        });

        // Запускаем подключение к SignalR
        start();
    </script>
</body>
</html>