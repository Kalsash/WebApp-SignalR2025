@model IEnumerable<WebApp_SignalR2025.Models.User>
@{
    ViewData["Title"] = "Chats Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages - Social Network</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        swamp: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-swamp-50 h-screen">
    <div class="max-w-7xl mx-auto h-full flex flex-col items-center justify-center">
        @if (User.Identity.IsAuthenticated)
        {
            <!-- Чат интерфейс -->
            <div class="w-full flex">
                <!-- Chat List (Left Column) -->
                <div class="w-1/3 bg-white border-r border-swamp-100 flex flex-col">
                    <!-- Header -->
                    <div class="p-6 border-b border-swamp-100">
                        <h2 class="text-2xl font-bold text-swamp-900">Messages</h2>
                        <!-- Кнопка выхода -->
                        <form method="post" asp-controller="Account" asp-action="Logout" class="mt-4">
                            <button type="submit" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-500 transition duration-300">Выход</button>
                        </form>
                    </div>

                    <!-- Conversations List -->
                    <div class="flex-1 overflow-y-auto">
                        @foreach (var user in Model)
                        {
                            var displayName = user.Id == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ? "Избранное" : user.UserName;
                            <div class="p-4 hover:bg-swamp-50 border-b border-swamp-100 cursor-pointer chat-item" data-user-id="@user.Id" data-user-name="@displayName" data-user-icon="@user.IconPath">
                                <div class="flex items-center space-x-3">
                                    <img src="@user.IconPath" class="w-12 h-12 rounded-full">
                                    <div class="flex-1">
                                        <div class="flex items-center justify-between">
                                            <h4 class="font-semibold text-swamp-900">@displayName</h4> <!-- Изменили на displayName -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Chat Window (Right Column) -->
                <div class="flex-1 flex flex-col">
                    <div id="chat-header" class="p-4 bg-white border-b border-swamp-100 flex items-center space-x-3 hidden">
                        <img id="receiver-icon" class="w-10 h-10 rounded-full">
                        <div>
                            <h3 id="receiver-name" class="font-semibold text-swamp-900"></h3>
                        </div>
                    </div>

                    <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4 bg-swamp-50"></div>

                    <div class="p-4 bg-white border-t border-swamp-100">
                        <div class="flex space-x-2">
                            <input type="text" id="messageInput" placeholder="Type your message..." class="flex-1 pl-4 pr-12 py-2 bg-swamp-100 rounded-full border-none focus:ring-2 focus:ring-swamp-400 placeholder-swamp-500 text-swamp-900">
                            <button id="sendButton" class="p-2 hover:bg-swamp-200 rounded-full">
                                <svg class="w-6 h-6 text-swamp-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" transform="rotate(90)">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- Кнопки входа и регистрации -->
            <div class="flex flex-col items-center">
                <h2 class="text-2xl font-bold text-swamp-900 mb-4">Welcome to Social Network</h2>
                <a asp-controller="Account" asp-action="Login" class="bg-swamp-600 text-white px-4 py-2 rounded hover:bg-swamp-500 transition duration-300">Вход</a>
                <a asp-controller="Account" asp-action="Register" class="mt-2 bg-swamp-600 text-white px-4 py-2 rounded hover:bg-swamp-500 transition duration-300">Регистрация</a>
            </div>
        }
    </div>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chats")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Получаем текущего пользователя
        const currentUser = {
            id: '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value',
            name: '@User.Identity.Name',
            icon: '@(User.FindFirst("IconPath")?.Value ?? "https://i.pravatar.cc/100")'
        };

        async function start() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.error(err);
                setTimeout(start, 5000);
            }
        }

        connection.onclose(async () => {
            await start();
        });

        connection.on("ReceiveMessage", (message) => {
            const messagesContainer = document.getElementById('messages-container');

            const messageElement = document.createElement('div');
            messageElement.className = 'flex items-start space-x-2 max-w-3/4';
            messageElement.innerHTML = `
                <img src="${message.SenderIcon}" class="w-8 h-8 rounded-full">
                <div>
                    <div class="bg-white p-3 rounded-xl shadow-sm">
                        <p class="text-swamp-900">${message.Message}</p>
                    </div>
                    <span class="text-xs text-swamp-500 mt-1 block">${new Date(message.Timestamp).toLocaleTimeString()}</span>
                </div>
            `;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        connection.on("UserTyping", (user) => {
            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.textContent = `${user.SenderName} is typing...`;
            typingIndicator.classList.remove('hidden');

            setTimeout(() => {
                typingIndicator.classList.add('hidden');
            }, 2000);
        });

        document.querySelectorAll('.chat-item').forEach(item => {
            item.addEventListener('click', function() {
                const receiverId = item.getAttribute('data-user-id');
                const receiverName = item.getAttribute('data-user-name');
                const receiverIcon = item.getAttribute('data-user-icon');

                // Установка заголовка чата в зависимости от получателя
                const chatHeader = document.getElementById('chat-header');
                const headerName = document.getElementById('receiver-name');

                headerName.innerText = receiverId === currentUser.id ? "Избранное" : receiverName;
                document.getElementById('receiver-icon').src = receiverIcon;

                chatHeader.classList.remove('hidden');

                // Очистить сообщения при выборе нового собеседника
                document.getElementById('messages-container').innerHTML = '';
            });
        });

        document.getElementById('sendButton').addEventListener('click', async () => {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (message) {
                const receiverId = document.getElementById('receiver-name').innerText == "Избранное" ? currentUser.id : document.selectedReceiverId; // Определите, с кем идет разговор
                await connection.invoke("SendMessage", receiverId, message);
                input.value = '';

                const messagesContainer = document.getElementById('messages-container');
                const messageElement = document.createElement('div');
                messageElement.className = 'flex items-start space-x-2 max-w-3/4 justify-end';
                messageElement.innerHTML = `
                    <div class="order-2">
                        <div class="bg-swamp-600 text-white p-3 rounded-xl shadow-sm">
                            <p>${message}</p>
                        </div>
                        <span class="text-xs text-swamp-500">${new Date().toLocaleTimeString()}</span>
                    </div>
                    <img src="${currentUser.icon}" class="w-8 h-8 rounded-full order-1">
                `;
                messagesContainer.appendChild(messageElement);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        });

        document.getElementById('messageInput').addEventListener('input', async (e) => {
            const receiverId = document.getElementById('receiver-name').innerText == "Избранное" ? currentUser.id : document.selectedReceiverId; // Определите, с кем идет разговор
            await connection.invoke("TypingNotification", receiverId);
        });

        // Запускаем подключение к SignalR
        start();
    </script>
</body>
</html>